// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package testv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestAPIClient is the client API for TestAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestAPIClient interface {
	HandleTestMessageRPC(ctx context.Context, in *PubSubRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PublishTestMessageRPC(ctx context.Context, in *PublishTestMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	HandleTestTask(ctx context.Context, in *HandleTestTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateTestTask(ctx context.Context, in *CreateTestTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type testAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTestAPIClient(cc grpc.ClientConnInterface) TestAPIClient {
	return &testAPIClient{cc}
}

func (c *testAPIClient) HandleTestMessageRPC(ctx context.Context, in *PubSubRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/test.TestAPI/HandleTestMessageRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testAPIClient) PublishTestMessageRPC(ctx context.Context, in *PublishTestMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/test.TestAPI/PublishTestMessageRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testAPIClient) HandleTestTask(ctx context.Context, in *HandleTestTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/test.TestAPI/HandleTestTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testAPIClient) CreateTestTask(ctx context.Context, in *CreateTestTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/test.TestAPI/CreateTestTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestAPIServer is the server API for TestAPI service.
// All implementations must embed UnimplementedTestAPIServer
// for forward compatibility
type TestAPIServer interface {
	HandleTestMessageRPC(context.Context, *PubSubRequest) (*emptypb.Empty, error)
	PublishTestMessageRPC(context.Context, *PublishTestMessageRequest) (*emptypb.Empty, error)
	HandleTestTask(context.Context, *HandleTestTaskRequest) (*emptypb.Empty, error)
	CreateTestTask(context.Context, *CreateTestTaskRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTestAPIServer()
}

// UnimplementedTestAPIServer must be embedded to have forward compatible implementations.
type UnimplementedTestAPIServer struct {
}

func (UnimplementedTestAPIServer) HandleTestMessageRPC(context.Context, *PubSubRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleTestMessageRPC not implemented")
}
func (UnimplementedTestAPIServer) PublishTestMessageRPC(context.Context, *PublishTestMessageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishTestMessageRPC not implemented")
}
func (UnimplementedTestAPIServer) HandleTestTask(context.Context, *HandleTestTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleTestTask not implemented")
}
func (UnimplementedTestAPIServer) CreateTestTask(context.Context, *CreateTestTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestTask not implemented")
}
func (UnimplementedTestAPIServer) mustEmbedUnimplementedTestAPIServer() {}

// UnsafeTestAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestAPIServer will
// result in compilation errors.
type UnsafeTestAPIServer interface {
	mustEmbedUnimplementedTestAPIServer()
}

func RegisterTestAPIServer(s grpc.ServiceRegistrar, srv TestAPIServer) {
	s.RegisterService(&TestAPI_ServiceDesc, srv)
}

func _TestAPI_HandleTestMessageRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubSubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestAPIServer).HandleTestMessageRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.TestAPI/HandleTestMessageRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestAPIServer).HandleTestMessageRPC(ctx, req.(*PubSubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestAPI_PublishTestMessageRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishTestMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestAPIServer).PublishTestMessageRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.TestAPI/PublishTestMessageRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestAPIServer).PublishTestMessageRPC(ctx, req.(*PublishTestMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestAPI_HandleTestTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleTestTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestAPIServer).HandleTestTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.TestAPI/HandleTestTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestAPIServer).HandleTestTask(ctx, req.(*HandleTestTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestAPI_CreateTestTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestAPIServer).CreateTestTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.TestAPI/CreateTestTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestAPIServer).CreateTestTask(ctx, req.(*CreateTestTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestAPI_ServiceDesc is the grpc.ServiceDesc for TestAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.TestAPI",
	HandlerType: (*TestAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleTestMessageRPC",
			Handler:    _TestAPI_HandleTestMessageRPC_Handler,
		},
		{
			MethodName: "PublishTestMessageRPC",
			Handler:    _TestAPI_PublishTestMessageRPC_Handler,
		},
		{
			MethodName: "HandleTestTask",
			Handler:    _TestAPI_HandleTestTask_Handler,
		},
		{
			MethodName: "CreateTestTask",
			Handler:    _TestAPI_CreateTestTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/src/api.proto",
}
